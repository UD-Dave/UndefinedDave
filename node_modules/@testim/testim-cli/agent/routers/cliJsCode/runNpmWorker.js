module.exports = function (input) {
    const {transactionId, packages, command, localPackageInstallFolder, proxyUri} = input;
    return installLocalPackages(transactionId, packages, command, localPackageInstallFolder, proxyUri);
};

const path = require('path');
const npm = require("npm");
const {NpmPackageError} = require('../../../errors');

function installLocalPackages(transactionId, packages, command, localPackageInstallFolder, proxyUri) {
    if (!packages || packages.length === 0) {
        return Promise.resolve();
    }

    const installFolder = path.join(localPackageInstallFolder, `/${transactionId}`);

    return new Promise((resolve, reject) => {
        const npmLoadConfig = {
            prefix: installFolder,
            loglevel: 'silent',
        };
        if(proxyUri) {
            npmLoadConfig.proxy = proxyUri;
            npmLoadConfig["https-proxy"] = proxyUri;
        }
        npm.load(npmLoadConfig, (err) => {
            if (err) {
                return reject(err);
            }

            npm.commands[command](packages, (installErr, data) => {
                if (installErr) {
                    return reject(new NpmPackageError(installErr.message));
                }
                resolve(Object.assign({data, installFolder}));
            });
        });
    });
}