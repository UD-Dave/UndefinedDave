#! /usr/bin/env node
/* eslint-disable no-console */

'use strict';

require('./bluebirdConfig.js');
const options = require('./runOptions');
const EventEmitter = require('events');
const logger = require('./commons/logger').getLogger('cli-entry');
const { onExit, ignoreFailingTestsInExitCode } = require('./cli/onExit');
const testRunner = require('./runner');
const prepareRunner = require('./commons/prepareRunner');
const { CLI_MODE } = require('./commons/constants');
const prepareRunnerAndTestimStartUtils = require('./commons/prepareRunnerAndTestimStartUtils');

const {
    NoArgsError,
    SeleniumError,
    ArgError,
} = require('./errors');

const utils = require('./utils');
const semver = require('semver');
const Promise = require('bluebird');
const perf = require('./commons/performance-logger');
const agentMode = require('./cliAgentMode');

try {
    require('./fixLocalBuild');
} catch (e) { /* :( */ }

async function checkNodeVersion() {
    const version = await utils.getEnginesVersionAsync();
    if (!semver.satisfies(process.version, version)) {
        throw new ArgError(`Required node version ${version} not satisfied with current version ${process.version}`);
    }
}

function main() {
    console.log('Starting Testim.io CLI');
    perf.log('Starting Testim.io CLI');
    require('./processHandler')(onExit);

    checkNodeVersion().catch(err => {
        console.log('Argument Error:', err.message);
        process.exit(1);
    });

    return Promise.try(() => options.process())
        .log('in main, after options.process')
        .tap(options => {
            require('./commons/logger').setProxyUri(global.proxyUri);
            if (options.parallel && options.parallel > 5) {
                EventEmitter.defaultMaxListeners = options.parallel * 2;
            }
            require('./commons/logger').setProjectId(options.project);
            require('./commons/runnerFileCache').setEncryptKey(typeof options.token === 'string' ? options.token : 'anonymous_encrypt_key');
        })
        .then(async (options) => {
            if (options.initCodimMode) {
                const codimCli = require('./codim/codim-cli');
                return codimCli.init(options.initTestProject);
            }

            if (options.loginMode) {
                return undefined;
            }

            if (options.createPrefechedData) {
                const runnerFileCache = require('./commons/runnerFileCache');
                await runnerFileCache.clear();
                await prepareRunner.initializeUserWithAuth(options);
                await require('./commons/preloadTests').preloadTests(options);
                if (!options.playerRequirePath && options.mode !== CLI_MODE.EXTENSION) {
                    await prepareRunnerAndTestimStartUtils.preparePlayer(options.playerLocation, options.canary);
                }
                const res = await runnerFileCache.waitForSave();
                if (res.success) {
                    console.log(`created prefeched data at ${runnerFileCache.getCacheFileLocation()}`);
                } else {
                    console.error('failed to create prefech data', res.error);
                }
                return undefined;
            }

            if (agentMode.shouldStartAgentMode(options)) {
                return agentMode.runAgentMode(options);
            }

            if (options.saveRCALocally) {
                const { port } = await require('./services/localRCASaver').initServer(options);
                options.localRCASaver = `http://localhost:${port}`;
            }

            if (options.exitCodeIgnoreFailingTests) {
                ignoreFailingTestsInExitCode();
            }

            perf.log('right before testRunner.init/prepareRunner.prepare');
            return Promise.all([
                testRunner.init(options),
                prepareRunner.prepare(options),
            ])
                .log('right after testRunner.init/prepareRunner.prepare')
                .then(([init, customExtensionLocalLocation]) => testRunner.run(options, customExtensionLocalLocation));
        })
        .catch(NoArgsError, () => {
            // display help by default
        })
        .catch(ArgError, err => {
            console.log('Argument Error:', err.message);
            return err;
        })
        .catch(SeleniumError, err => {
            console.log('Selenium Error:', err.message);
            return err;
        })
        .catch(err => {
            console.log('Error:', err.message);
            logger.error('runner ended with unexpected error', { err });
            return err;
        })
        .then(result => {
            if (Array.isArray(result) && result.length === 0) {
                console.log('No tests ran');
            }
            onExit(result);
        });
}

main();

