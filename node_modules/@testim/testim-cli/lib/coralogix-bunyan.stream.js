'use strict';

// This is copied from coralogix-bunyan-stream pacakge and altered to expose waitForFlush

const coralogixLogger = require('@testim/coralogix-logger');

const sevMap = {
    10: coralogixLogger.Severity.debug,
    30: coralogixLogger.Severity.info,
    40: coralogixLogger.Severity.warning,
    50: coralogixLogger.Severity.error,
    60: coralogixLogger.Severity.critical,
    20: coralogixLogger.Severity.debug,
};
const CoralogixStream = (function () {
    function CoralogixStream(options) {
        if (!options) options = {};
        CoralogixStream.logger = this.logger = new coralogixLogger.CoralogixLogger(options.category);
    }
    CoralogixStream.waitForFlush = function () {
        return CoralogixStream.logger.waitForFlush();
    };
    CoralogixStream.prototype.write = function (rec) {
        const log = new coralogixLogger.Log();
        log.severity = sevMap[rec.level];
        log.category = rec.category;
        if (rec.className) log.className = rec.className;
        if (rec.methodName) log.methodName = rec.methodName;
        if (rec.threadId) log.threadId = rec.threadId;
        log.text = this.removeStaticFields(rec);
        this.logger.addLog(log);
    };
    CoralogixStream.prototype.removeStaticFields = function (json) {
        delete json.threadId;
        delete json.methodName;
        delete json.className;
        delete json.category;
        return JSON.stringify(json, this.replaceErrors);
    };
    CoralogixStream.prototype.replaceErrors = function (key, value) {
        if (value instanceof Error) {
            const error = {};
            Object.getOwnPropertyNames(value).forEach((key) => {
                error[key] = value[key];
            });
            return error;
        }
        return value;
    };
    CoralogixStream.configure = function (config) {
        coralogixLogger.CoralogixLogger.configure(config);
    };
    return CoralogixStream;
}());

module.exports = { CoralogixStream };
