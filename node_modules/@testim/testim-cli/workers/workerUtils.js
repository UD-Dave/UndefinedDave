const Promise = require('bluebird');
const utils = require('../utils');
const gridService = require('../services/gridService');
const logger = require('../commons/logger').getLogger('worker-utils');
const { timeoutMessages } = require('../commons/constants');
const { GetBrowserError, PageNotAvailableError } = require('../errors');

const waitUntilBrowserTimeout = (err, startTime, interval, projectId, workerId, player, releaseSlotOnTestFinished) => {
    logger.warn('failed getting browser from grid', { err });
    return releasePlayer(workerId, releaseSlotOnTestFinished, projectId, player)
        .then(() => {
            const requestTime = Date.now() - startTime;
            const timeDiff = interval - requestTime;
            return Promise.delay(timeDiff).then(() => Promise.reject(err));
        });
};

const releaseGridSlot = (workerId, releaseSlotOnTestFinished, projectId) => {
    if (!releaseSlotOnTestFinished) {
        return Promise.resolve();
    }
    return gridService.releaseGridSlot(workerId, projectId);
};

const releasePlayer = (workerId, releaseSlotOnTestFinished, projectId, player) => {
    logger.info('releasing player', { hasPlayer: Boolean(player) });
    return (player ? player.onDone() : Promise.resolve())
        .finally(() => releaseGridSlot(workerId, releaseSlotOnTestFinished, projectId));
};

module.exports.releasePlayer = releasePlayer;

module.exports.getBrowserWithRetries = ({ getBrowserOnce, testPlayerFactory, releaseSlotOnTestFinished }, { totalTimeoutDuration, singleGetBrowserDuration, projectId, workerId, reporter }) => {
    const maxGetBrowserAttempts = totalTimeoutDuration / singleGetBrowserDuration;
    let failedAttempts = 0;

    return utils.runWithRetries(() => {
        const startTime = Date.now();
        const player = testPlayerFactory();
        return getBrowserOnce(player)
            .then((getBrowserRes) => player || getBrowserRes)
            .timeout(singleGetBrowserDuration, timeoutMessages.GET_BROWSER_TIMEOUT_MSG)
            .tapCatch(() => reporter.onGetBrowserFailure(workerId, projectId, ++failedAttempts))
            .tap(() => reporter.onGetBrowserSuccess(workerId, projectId))
            .catch(err => waitUntilBrowserTimeout(err, startTime, singleGetBrowserDuration, projectId, workerId, player, releaseSlotOnTestFinished));
    }, maxGetBrowserAttempts).catch(err => {
        if (err instanceof PageNotAvailableError) {
            throw err;
        }
        throw new GetBrowserError(err);
    });
};

module.exports.isGetBrowserError = err => err && err.constructor && err.constructor.name === 'GetBrowserError';
