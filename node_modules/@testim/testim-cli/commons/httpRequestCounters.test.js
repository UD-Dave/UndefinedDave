const { makeCounters } = require('./httpRequestCounters');
const { runWithRetries } = require('../utils');
const { rejects, doesNotReject, strictEqual } = require('assert');

describe('the http request counters', () => {
    let wrapWithMonitoring;
    beforeEach(() => {
        wrapWithMonitoring = makeCounters();
    });

    it('Marks an always failing network as unhealthy', async () => {
        const fn = runWithRetries(wrapWithMonitoring(() => { throw new Error('bad network'); }), 20, 1);
        await rejects(fn);
        strictEqual(wrapWithMonitoring.isNetworkHealthy(), false);
    });

    it('Marks an unstable network as unhealthy', async () => {
        const fn = runWithRetries(wrapWithMonitoring(() => { throw new Error('bad network'); }), 20, 1);
        const fn2 = runWithRetries(wrapWithMonitoring(() => 'hello'), 20, 1);
        await rejects(fn);
        await doesNotReject(fn2);
        strictEqual(wrapWithMonitoring.isNetworkHealthy(), false);
    });

    it('Marks a recovering network as healthy', async () => {
        const fn = runWithRetries(wrapWithMonitoring(() => { throw new Error('bad network'); }), 20, 1);
        await rejects(fn);
        const fn2 = wrapWithMonitoring(() => 'hello');
        await Promise.all(Array(200).fill().map(fn2));
        strictEqual(wrapWithMonitoring.isNetworkHealthy(), true);
    });

    it('Marks a healthy network as healthy', async () => {
        const fn2 = wrapWithMonitoring(() => 'hello');
        await Promise.all(Array(200).fill().map(fn2));
        strictEqual(wrapWithMonitoring.isNetworkHealthy(), true);
    });
});
