'use strict';

const ora = require('ora');

const LambdatestService = require('../services/lambdatestService');
const { gridTypes } = require('./constants');
const testimNgrok = require('./testimNgrok');
const logger = require('./logger').getLogger('tunnel');

const shouldUseLambdatestTunnel = options => [gridTypes.LAMBDATEST, gridTypes.HYBRID].includes(options.gridData.type) && options.gridData.tunnel !== 'ngrok';

const connect = async (options, authData) => {
    if (!options.tunnel) {
        return;
    }

    let spinner;
    try {
        if (shouldUseLambdatestTunnel(options)) {
            spinner = ora('Starting testim lambdatest tunnel...').start();
            await LambdatestService.connectTunnel(options);
        } else {
            spinner = ora('Starting testim ngrok tunnel...').start();
            await testimNgrok.connectTunnel(options, authData);
        }
        spinner.succeed();
    } catch (err) {
        const msg = 'Failed to start tunnel. Please contact support@testim.io';
        logger.error('Failed to open tunnel', { err });
        spinner.fail(msg);
        throw new Error(msg);
    }
};

const disconnect = async (options) => {
    if (!options.tunnel) {
        return;
    }

    try {
        if (shouldUseLambdatestTunnel(options)) {
            await LambdatestService.disconnectTunnel(options);
        } else {
            await testimNgrok.disconnectTunnel();
        }
    } catch (err) {
        const msg = 'catch error - failed to close tunnel';
        logger.error(msg, { err });
        throw new Error(msg);
    }
};

module.exports = {
    connect,
    disconnect,
};
